/*!
  \file zinvul_config.hpp
  \author Sho Ikeda

  Copyright (c) 2015-2019 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZINVUL_CONFIG_HPP
#define ZINVUL_CONFIG_HPP

// Zisc
#include "zisc/zisc_config.hpp"
#include "zisc/utility.hpp"

constexpr unsigned int kZinvulVersionMajor = @zinvul_version_major@;
constexpr unsigned int kZinvulVersionMinor = @zinvul_version_minor@;
constexpr unsigned int kZinvulVersionPatch = @zinvul_version_patch@;
constexpr char kZinvulVersion[] = "@zinvul_version@";

namespace zinvul {

// General
// Integer types
using int8b = zisc::int8b;
using int16b = zisc::int16b;
using int32b = zisc::int32b;
using int64b = zisc::int64b;
// Unsigned integer types
using uint = zisc::uint;
using uint8b = zisc::uint8b;
using uint16b = zisc::uint16b;
using uint32b = zisc::uint32b;
using uint64b = zisc::uint64b;
// Vector values
constexpr int32b kVecFalse = 0b0;
constexpr int32b kVecTrue = ~0b0;

// Device

/*!
  */
enum class DeviceType : uint32b
{
  kCpu = 0,
  kVulkan
};

/*!
  */
enum class QueueType : uint32b
{
  kCompute = 0,
  kTransfer
};

// Buffer

/*!
  */
enum class DescriptorType : uint32b
{
  kUniform = 0,
  kStorage,
};

/*!
  */
enum class BufferUsage : uint32b
{
  kDeviceOnly = 0b1u << 0,
  kHostOnly = 0b1u << 1,
  kHostToDevice = 0b1u << 2,
  kDeviceToHost = 0b1u << 3,
};

/*!
  \brief config values in zinvul
  */
class Config
{
 public:
  //! Return whether uniform buffer is enabled
  static constexpr bool isUniformBufferEnabled() noexcept;

  //! Return whether vulkan backendb is enabled
  static constexpr bool isVulkanBackendEnabled() noexcept;
};

} // namespace zinvul

#include "zinvul/zinvul_config-inl.hpp"

#endif // ZINVUL_CONFIG_HPP
