/*!
  \file @kernel_set_name@.hpp
  \author Sho Ikeda

  Copyright (c) 2015-2019 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZINVUL_@kernel_set_name@_HPP
#define ZINVUL_@kernel_set_name@_HPP

// Standard C++ library
#include <fstream>
#include <vector>
// Zisc
#include "zisc/error.hpp"
#include "zisc/memory_resource.hpp"
#include "zisc/utility.hpp"
// Zinvul
#include "zinvul/kernel_set.hpp"
#include "zinvul/zinvul_config.hpp"
#include "zinvul/cppcl/address_space_pointer.hpp"
#include "zinvul/cppcl/atomic.hpp"
#include "zinvul/cppcl/math.hpp"
#include "zinvul/cppcl/memory_fence.hpp"
#include "zinvul/cppcl/relational.hpp"
#include "zinvul/cppcl/types.hpp"
#include "zinvul/cppcl/utility.hpp"
#include "zinvul/cppcl/vector.hpp"

#ifdef Z_CLANG
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-macros"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif // Z_CLANG

namespace zinvul {

namespace cl {

namespace @kernel_set_name@ {

#if defined(__kernel)
  static_assert(false, "The macro '__kernel' is already defined.");
#endif // __kernel
#define __kernel

#if defined(kernel)
  static_assert(false, "The macro 'kernel' is already defined.");
#endif // kernel
#define kernel

@kernel_include_lines@

#undef __kernel
#undef kernel

} // namespace @kernel_set_name@

} // namespace cl

namespace @kernel_set_name@ {

/*!
  */
class __KernelSet : public zinvul::KernelSet<__KernelSet>
{
 public:
  //! Return the SPIR-V code
  static zisc::pmr::vector<uint32b> getKernelSpirvCode(
      zisc::pmr::memory_resource* mem_resource) noexcept
  {
    zisc::pmr::vector<uint32b> spirv_code{mem_resource};
#ifndef ZINVUL_BAKE_KERNELS
    std::ifstream spirv_file{"@spv_file_path@", std::ios_base::binary};
    ZISC_ASSERT(spirv_file.is_open(), "The SPIR-V file doesn't exist.");
    std::streamsize spirv_size = 0;
    {
      const auto begin = spirv_file.tellg();
      spirv_file.seekg(0, std::ios_base::end);
      const auto end = spirv_file.tellg();
      spirv_size = end - begin;
      ZISC_ASSERT((spirv_size % 4) == 0, "The size of the SPIR-V code is invalid.");
      spirv_file.clear();
      spirv_file.seekg(0, std::ios_base::beg);
    }
    spirv_code.resize(zisc::cast<std::size_t>(spirv_size / 4));
    spirv_file.read(reinterpret_cast<char*>(spirv_code.data()), spirv_size);
#else // ZINVUL_BAKE_KERNELS
    const auto to_4byte = [](const uint32b byte1,
                             const uint32b byte2,
                             const uint32b byte3,
                             const uint32b byte4)
    {
      const uint32b b = byte1 | (byte2 << 8u) | (byte3 << 16u) | (byte4 << 24u);
      return b;
    };
    spirv_code = {
#include "@baked_spv_file_path@"
        };
#endif // ZINVUL_BAKE_KERNELS
    return spirv_code;
  }

  //! Return the set number
  static constexpr uint32b getId() noexcept
  {
    return @set_number@;
  }
};

} // namespace @kernel_set_name@

} // namespace zinvul

#ifdef Z_CLANG
#pragma clang diagnostic pop
#pragma clang diagnostic pop
#endif // Z_CLANG

#endif // ZINVUL_@kernel_set_name@_HPP
