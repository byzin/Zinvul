/*!
  \file @kernel_set_name@.hpp
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2020 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZINVUL_KERNEL_SET_@kernel_set_name@_HPP
#define ZINVUL_KERNEL_SET_@kernel_set_name@_HPP

// Standard C++ library
#include <memory>
#include <vector>
// Zisc
#include "zisc/std_memory_resource.hpp"
// Zinvul
#include "zinvul/kernel_set.hpp"
#include "zinvul/zinvul_config.hpp"
#include "zinvul/cppcl/address_space_pointer.hpp"
#include "zinvul/cppcl/algorithm.hpp"
#include "zinvul/cppcl/atomic.hpp"
#include "zinvul/cppcl/geometric.hpp"
#include "zinvul/cppcl/math.hpp"
#include "zinvul/cppcl/relational.hpp"
#include "zinvul/cppcl/synchronization.hpp"
#include "zinvul/cppcl/types.hpp"
#include "zinvul/cppcl/utility.hpp"
#include "zinvul/cppcl/vector.hpp"

#ifdef Z_CLANG
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-macros"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif // Z_CLANG

namespace zinvul {

namespace cl {

/*!
  \namespace @kernel_set_name@
  \brief No brief description

  No detailed description.
  */
namespace @kernel_set_name@ {

#if defined(__kernel)
static_assert(false, "The macro '__kernel' is already defined.");
#endif // __kernel
/*!
  \def __kernel
  \brief a definition for the compatibility with OpenCL

  No detailed description.
  */
#define __kernel inline

#if defined(kernel)
static_assert(false, "The macro 'kernel' is already defined.");
#endif // kernel
/*!
  \def kernel
  \brief a definition for the compatibility with OpenCL

  No detailed description.
  */
#define kernel __kernel

/*!
  \def ZINVUL_GLOBAL_NAMESPACE
  \brief No brief description

  No detailed description.
  */
#define ZINVUL_GLOBAL_NAMESPACE ::zinvul::cl

@kernel_inclusion_lines@

#undef ZINVUL_GLOBAL_NAMESPACE
#undef __kernel
#undef kernel

} // namespace @kernel_set_name@

} // namespace cl

/*!
  \namespace @kernel_set_name@
  \brief No brief description

  No detailed description.
  */
namespace @kernel_set_name@ {

namespace inner {

/*!
  \brief No brief description

  No detailed description.
  */
class KernelSet : public zinvul::KernelSet<KernelSet>
{
 public:
  //! Return the ID number of the kernel set
  static constexpr uint32b id() noexcept
  {
    return @kernel_set_number@;
  }

  //! Load the SPIR-V code
  static void loadSpirvCode(zisc::pmr::vector<uint32b>* spirv_code_out) noexcept;
};

} // namespace inner

} // namespace @kernel_set_name@

} // namespace zinvul

#ifdef Z_CLANG
#pragma clang diagnostic pop
#pragma clang diagnostic pop
#endif // Z_CLANG

#endif // ZINVUL_KERNEL_SET_@kernel_set_name@_HPP
