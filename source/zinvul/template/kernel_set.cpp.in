/*!
  \file @kernel_set_name@.cpp
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2020 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#include "zinvul/kernel_set/@kernel_set_name@.hpp"
// Standard C++ library
#include <fstream>
#include <vector>
// Zisc
#include "zisc/error.hpp"
#include "zisc/std_memory_resource.hpp"
#include "zisc/utility.hpp"
// Zinvul
#include "zinvul/kernel_set.hpp"
#include "zinvul/zinvul_config.hpp"

namespace {

using zinvul::uint32b;

//! Concatenate four bytes (char) into a 32bit unsigned integer
inline
constexpr uint32b to4Byte(const uint32b byte1,
                          const uint32b byte2,
                          const uint32b byte3,
                          const uint32b byte4) noexcept
{
  const uint32b b = byte1 | (byte2 << 8u) | (byte3 << 16u) | (byte4 << 24u);
  return b;
}

} // namespace 

namespace zinvul {

namespace @kernel_set_name@ {

namespace inner {

/*!
  \details No detailed description

  \param [in,out] mem_resource No description.
  \return No description
  */
zisc::pmr::vector<uint32b> KernelSet::getKernelSpirvCode(
    zisc::pmr::memory_resource* mem_resource) noexcept
{
  zisc::pmr::vector<uint32b> spirv_code{mem_resource};
#if !defined(ZINVUL_BAKE_KERNELS)
  std::ifstream spirv_file{"@spv_file_path@", std::ios_base::binary};
  ZISC_ASSERT(spirv_file.is_open(), "The SPIR-V file doesn't exist.");
  std::streamsize spirv_size = 0;
  {
    const auto begin = spirv_file.tellg();
    spirv_file.seekg(0, std::ios_base::end);
    const auto end = spirv_file.tellg();
    spirv_size = end - begin;
    ZISC_ASSERT((spirv_size % 4) == 0, "The size of the SPIR-V code is invalid.");
    spirv_file.clear();
    spirv_file.seekg(0, std::ios_base::beg);
  }
  spirv_code.resize(zisc::cast<std::size_t>(spirv_size / 4));
  spirv_file.read(reinterpret_cast<char*>(spirv_code.data()), spirv_size);
#else // ZINVUL_BAKE_KERNELS
  spirv_code = {
#include "@baked_spv_file_path@"
      };
#endif // ZINVUL_BAKE_KERNELS
  return spirv_code;
}

} // namespace inner

} // namespace @kernel_set_name@

} // namespace zinvul
